#!/bin/sh

# Pre-commit hook para el portafolio EG
# Ejecuta checks b√°sicos antes de permitir commits

echo "üîç Ejecutando pre-commit checks..."

# Verificar que estamos en una feature branch
current_branch=$(git branch --show-current)
if [[ "$current_branch" == "main" || "$current_branch" == "develop" ]]; then
    echo "‚ö†Ô∏è  Advertencia: Est√°s haciendo commit directamente en $current_branch"
    echo "   Considera usar una feature branch para cambios"
    read -p "¬øContinuar? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Commit cancelado"
        exit 1
    fi
fi

# Ejecutar linter
echo "üìù Ejecutando linter..."
if ! npm run lint; then
    echo "‚ùå Linter fall√≥. Corrige los errores antes de hacer commit."
    exit 1
fi

# Verificar que no hay archivos de configuraci√≥n sensibles
echo "üîí Verificando archivos sensibles..."
if git diff --cached --name-only | grep -E "\.(env|key|secret)" > /dev/null; then
    echo "‚ùå Error: No puedes hacer commit de archivos de configuraci√≥n sensibles"
    echo "   Aseg√∫rate de que est√©n en .gitignore"
    exit 1
fi

# Verificar tama√±o de archivos
echo "üìè Verificando tama√±o de archivos..."
large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ]; then if [ $(stat -f%z "{}" 2>/dev/null || stat -c%s "{}" 2>/dev/null || echo 0) -gt 10485760 ]; then echo "{}"; fi; fi')
if [ ! -z "$large_files" ]; then
    echo "‚ùå Error: Archivos muy grandes detectados:"
    echo "$large_files"
    echo "   Considera usar Git LFS para archivos grandes"
    exit 1
fi

echo "‚úÖ Pre-commit checks pasaron exitosamente"
exit 0
